name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, nightly]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install PyTorch (CPU)
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
    
    - name: Setup environment
      run: |
        TORCH_PATH=$(python -c "import torch; print(torch.__path__[0])")
        echo "LIBTORCH=$TORCH_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$TORCH_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$TORCH_PATH/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Check formatting
      run: cargo fmt -- --check
      continue-on-error: true
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      continue-on-error: true
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose -- --test-threads=1
      continue-on-error: true
    
    - name: Run doc tests
      run: cargo test --doc --verbose
      continue-on-error: true

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Python & PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
    
    - name: Setup environment
      run: |
        TORCH_PATH=$(python -c "import torch; print(torch.__path__[0])")
        echo "LIBTORCH=$TORCH_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$TORCH_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Run benchmarks
      run: cargo bench --no-fail-fast
      continue-on-error: true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Python & PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
    
    - name: Setup environment
      run: |
        TORCH_PATH=$(python -c "import torch; print(torch.__path__[0])")
        echo "LIBTORCH=$TORCH_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$TORCH_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --out Xml --output-dir ./coverage
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/cobertura.xml
        fail_ci_if_error: false

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Python & PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
    
    - name: Setup environment
      run: |
        TORCH_PATH=$(python -c "import torch; print(torch.__path__[0])")
        echo "LIBTORCH=$TORCH_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$TORCH_PATH/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$TORCH_PATH/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Strip binary
      if: matrix.os == 'ubuntu-latest'
      run: strip target/${{ matrix.target }}/release/rust-ml
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rust-ml-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/rust-ml*
          !target/${{ matrix.target }}/release/rust-ml.d

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      uses: rustsec/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
